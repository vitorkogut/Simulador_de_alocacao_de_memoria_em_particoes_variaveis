/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simuladormemoria;

import java.awt.Color;
import java.awt.Component;
import javax.swing.JLabel;
import javax.swing.JTable;
import static javax.swing.SwingConstants.CENTER;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vitor
 */
public class viewSumulacao extends javax.swing.JFrame {

    /**
     * Creates new form viewSumulacao
     */
    public viewSumulacao() {
        initComponents();
    }
    
    public Bloco_processo[] processos;
    public int tamanhoTotal;
    public Bloco_processo[] MEMORIA;
    public int QtnProcessos;
    
    public void callViewSimulador(Bloco_processo[] bloco, int tamanho, int metodo, int qtnProcessos){
        processos = bloco;
        tamanhoTotal = tamanho;
        QtnProcessos = qtnProcessos;
        
        MEMORIA = new Bloco_processo[tamanhoTotal];
        
        for(int i=0; i < tamanho; i++){
            DefaultTableModel model = (DefaultTableModel) tTabela.getModel(); // CRIA BRANCOS
            model.addRow(new Object[]{"","","","",""});
            MEMORIA[i] = new Bloco_processo();
            MEMORIA[i].nome = "";
            MEMORIA[i].cod = 666420;
            MEMORIA[i].cor = 999999999;
            MEMORIA[i].tamanho = 0;
            MEMORIA[i].tempo = 0;
            MEMORIA[i].tamnhoEmCelulas = 0;
            
        }
        
        if(metodo == 0){
            tMetodo.setText("Metodo: First Fit");
        }else if(metodo == 1){
            tMetodo.setText("Metodo: Best Fit");
        }
        
        //AGR A PORRA FICA SÉRIA

        
        
        this.setVisible(true);
        
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tTabela = new javax.swing.JTable();
        tMetodo = new javax.swing.JLabel();
        bStep = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tEstado = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tTabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "TAMANHO (Bytes)", "NOME", "TEMPO DE PROCESSO", "PARTIÇÔES", "COR"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tTabela);

        tMetodo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        tMetodo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        bStep.setBackground(new java.awt.Color(204, 204, 255));
        bStep.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bStep.setText("STEP");
        bStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bStepActionPerformed(evt);
            }
        });

        tEstado.setColumns(20);
        tEstado.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        tEstado.setLineWrap(true);
        tEstado.setRows(5);
        tEstado.setWrapStyleWord(true);
        jScrollPane1.setViewportView(tEstado);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tMetodo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bStep, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 20, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 917, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tMetodo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(bStep, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bStepActionPerformed
       //SIMULAR NUM VETOR E SO IMPRIMIR
       
       System.out.println("\n\n\n\n\n\n\n");
            
        // PASSA TEMPO
        for(int i=0; i < tamanhoTotal; i++){
            if(MEMORIA[i].nome != "" && MEMORIA[i].tempo > 0){
                MEMORIA[i].tempo = MEMORIA[i].tempo - 1;
                i = i + (int)MEMORIA[i].tamnhoEmCelulas;
             }
        }
        
       if(tMetodo.getText() == "Metodo: First Fit"){
           boolean aInserir = false;
           Bloco_processo blocoParaInsersao = new Bloco_processo();
           
           for(int i = 0; i< tamanhoTotal; i++){ // CONSFERE SE A PROCESSOS A INSERIR
               if(processos[i].inserido == false){
                   blocoParaInsersao = processos[i];
                   aInserir = true;
                   System.out.println("############### \n A inserir processo, ID:" + blocoParaInsersao.cod+ " de tamanho:"+blocoParaInsersao.tamnhoEmCelulas + " celulas. \n###############");
                   break;
               }
           }
           
           if(aInserir){ // CASO HAJA QUE INSERIR ALGUM PROCESSO
               float tamanhoNecessario = blocoParaInsersao.tamnhoEmCelulas;
               int posInicial = 0, posFinal = 0, tamanhoAchado = 1;
               int result = 0;// 0 = TENTANDO, 1 = NAO PODE, 2 = CONSEGUE
               
               System.out.println("### aInserir ###");
               
               while(result == 0){
                   
                   for(int i = 0; i < tamanhoTotal; i++){
                       
                       if(i == tamanhoTotal - 1){
                           result = 1;
                           System.out.println("######## NAO AH MAIS MEMORIA DISPONIVEL ########");
                           tEstado.setText("Não é possivel inserir  o processo "+ blocoParaInsersao.cod + " pois não possui  o espaço livre necessario ("+ blocoParaInsersao.tamnhoEmCelulas+" partiçoes)");
                           break;
                       }
                       
                       if(Float.compare(tamanhoAchado, tamanhoNecessario + 1) >= 0){
                           blocoParaInsersao.inicio = posInicial;
                           blocoParaInsersao.fim = posFinal ;
                           System.out.println("#############\n Espaço encontrado para o processo " + blocoParaInsersao.cod+", Começo:" + posInicial + " | Fim:" + posFinal+"\n#############");
                           result = 2;
                           break;
                       } 
                       
                       if( MEMORIA[i].nome == ""){
                           tamanhoAchado ++;
                           posFinal = i;
                       }else{
                           tamanhoAchado = 1;
                           posInicial = i+1;
                           posFinal = i+1;
                       }
                       
                       
                   }
                   
                   if(result == 2){
                       for(int i = posInicial; i <= posFinal; i++){
                           MEMORIA[i] = blocoParaInsersao;                   
                       }
                       for(int i = 0; i<QtnProcessos; i++){
                           if(processos[i].cod == blocoParaInsersao.cod){
                               processos[i].inserido = true;
                               tEstado.setText("");
                           }
                       }
                   }
                   
                   
                }
   
           }else{
               tEstado.setText("Nao ah mais processos a serem inceridos");
           }
               
           
           System.out.println("################  MEMORIA ATUAL ###################");
           for(int i = 0; i < tamanhoTotal; i++){
               System.out.print(MEMORIA[i].nome +" T=" + MEMORIA[i].tempo + ", ");
           }
           
           
           
            
       }
      
       
       
       // LIMPA CELULAS
       for(int i = 0; i < tamanhoTotal; i ++){
           if(MEMORIA[i].tempo == 0){
                MEMORIA[i].nome = "";
                MEMORIA[i].cod = 666420;
                MEMORIA[i].cor = 999999999;
                MEMORIA[i].tamanho = 0;
                MEMORIA[i].tempo = 0;
                MEMORIA[i].tamnhoEmCelulas = 0;
           }

       }
      
       
       
       // PRINT NA TABELA
       for(int i=0; i < tamanhoTotal; i++){
            DefaultTableModel model = (DefaultTableModel) tTabela.getModel();
            model.removeRow(0);
        }
       
        for(int i=0; i < tamanhoTotal; i++){
            DefaultTableModel model = (DefaultTableModel) tTabela.getModel();
            model.addRow(new Object[]{MEMORIA[i].cod, MEMORIA[i].tamanho, MEMORIA[i].nome, MEMORIA[i].tempo, MEMORIA[i].tamnhoEmCelulas, MEMORIA[i].cor});
        }
        
         
         //PINTANTE
        tTabela.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column){
            JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            //CODIGO AQUI
                Color c = Color.WHITE;
               
                label.setBackground( new Color(Integer.parseInt(table.getValueAt(row,5).toString())));   
                label.setAlignmentX(CENTER);
                label.setAlignmentY(CENTER);
            //ATE AQUI
        return label;

         }});
       
    }//GEN-LAST:event_bStepActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewSumulacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewSumulacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewSumulacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewSumulacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new viewSumulacao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bStep;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea tEstado;
    private javax.swing.JLabel tMetodo;
    private javax.swing.JTable tTabela;
    // End of variables declaration//GEN-END:variables
}
